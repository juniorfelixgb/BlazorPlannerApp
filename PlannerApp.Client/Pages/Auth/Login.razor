@page "/auth/login"

@layout AuthLayout
@inject AuthenticationService _authService
@inject NavigationManager _navigationManager
@inject ILocalStorageService _storageService
@inject AuthenticationStateProvider _authenticationStateProvider

<div class="row">
    <div class="col-12">
        <h2>Login to your account</h2>
        <EditForm Model="model" OnValidSubmit="LoginUser">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />

                <DataAnnotationsValidator />
                <ValidationSummary />

                <label>Email</label>
                <RadzenTextBox @bind-Value="model.Email"></RadzenTextBox>

                <label>Password</label>
                <RadzenPassword @bind-Value="model.Password"></RadzenPassword>

                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit"
                              Text="Login" Disabled="isBusy"
                              ButtonStyle="Radzen.ButtonStyle.Secondary"
                              class="btn btn-block mr-2"></RadzenButton>

                <RadzenButton ButtonType="Radzen.ButtonType.Button"
                              Text="Register" Disabled="isBusy" Click="GoToRegister"
                              ButtonStyle="Radzen.ButtonStyle.Primary"
                              class="btn btn-block mr-2"></RadzenButton>
                <span class="mt-2">
                    <a href="#">Forgot your password?</a>
                </span>
            </RadzenCard>

        </EditForm>
    </div>
</div>


@code {
    LoginRequest model = new LoginRequest();
    bool isBusy = false;
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    public async Task LoginUser()
    {
        isBusy = true;
        var result = await _authService.LoginUserAsync(model);
        if (result.IsSuccess)
        {
            var userInfo = new LocalUserInfo()
            {
                AccessToken = result.Message,
                Email = result.UserInfo["Email"],
                FirstName = result.UserInfo["FirstName"],
                LastName = result.UserInfo["LastName"],
                Id = result.UserInfo[System.Security.Claims.ClaimTypes.NameIdentifier]
            };
            await _storageService.SetItemAsync<LocalUserInfo>("User", userInfo);
            await _authenticationStateProvider.GetAuthenticationStateAsync();
            _navigationManager.NavigateTo("/");
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }
        isBusy = false;
    }

    void GoToRegister()
    {
        _navigationManager.NavigateTo("/auth/register");
    }
}
